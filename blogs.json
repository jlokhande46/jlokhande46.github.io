{"status":"ok","feed":{"url":"https://medium.com/feed/@@jlokhande46","title":"Stories by jayesh lokhande on Medium","link":"https://medium.com/@jlokhande46?source=rss-4217c0302166------2","author":"","description":"Stories by jayesh lokhande on Medium","image":"https://cdn-images-1.medium.com/proxy/1*TGH72Nnw24QL3iV9IOm4VA.png"},"items":[{"title":"Logging in enterprise applications","pubDate":"2022-07-26 15:44:36","link":"https://medium.com/@jlokhande46/logging-in-enterprise-applications-e43b40cf4e3c?source=rss-4217c0302166------2","guid":"https://medium.com/p/e43b40cf4e3c","author":"jayesh lokhande","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=e43b40cf4e3c","description":"\n<h3>Introduction</h3>\n<p>Logging is an important part of the software development process. It allows you to capture information about what\u2019s happening in your application, which can be used for troubleshooting later on or for post-mortem analysis. The key to effective logging is knowing when and how to use it. To help developers get comfortable with logging, this blog will cover some basic concepts and terminology related to logging in Java EE7 applications.</p>\n<h3>Logging is useful, but use it\u00a0wisely.</h3>\n<p>Logging is a very useful tool for debugging, diagnosing problems and monitoring the status of your application. However, logging can be abused if used incorrectly.</p>\n<ul>\n<li>Use it wisely: Don\u2019t overuse logging because it will make your application slower and less efficient at runtime. It\u2019s important to determine when to log something in the first place\u200a\u2014\u200ayou don\u2019t want to make use of all available resources just because you have a log file open on your\u00a0screen!</li>\n<li>Don\u2019t let logs pile up: If there are too many messages being written into logs every day (or even every hour), this could cause serious performance issues on large systems where performance matters\u00a0most.</li>\n</ul>\n<h3>Logging Level</h3>\n<p>The logging level of an application can be set in several\u00a0ways:</p>\n<ul>\n<li>The appender, logger and configuration files.</li>\n<li>System properties.</li>\n</ul>\n<h3>Logging in\u00a0Java</h3>\n<p>Java has a lot of logging frameworks in the Java.util package. The most popular\u00a0are:</p>\n<ul>\n<li>java.util.logging\u200a\u2014\u200athis provides a unified API for logging and tracing across applications, systems, and devices (including JVM processes).</li>\n<li>java.util.logging.ConsoleHandler\u200a\u2014\u200athis uses the JDK\u2019s native Console class to write messages to standard output devices such as screen or log files on disk; it does not require any additional configuration on its behalf at runtime; it supports both single-line and multi-line text formatting options; etc., etc.,\u00a0etc\u2026</li>\n</ul>\n<h3>Logging in Spring\u00a0Boot</h3>\n<p>Spring Boot applications can be configured to log events. This is done by adding the @EnableLogging annotation to your application class, and providing a logger implementation that will be used by all requests within your\u00a0app.</p>\n<p>The following code snippet shows how you might do\u00a0this:</p>\n<p>@SpringBootApplication @EnableLogging public class MyApp { /** * The logger used by this application.*/ private final Logger log = new Logger(this); }</p>\n<h3>Conclusion</h3>\n<p>In this article, we\u2019ve covered some of the most common logging options in Java and Spring Boot. We\u2019ve also shown you how to create a custom logger that can be used with your favorite logback implementation. This is just the beginning!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e43b40cf4e3c\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Introduction</h3>\n<p>Logging is an important part of the software development process. It allows you to capture information about what\u2019s happening in your application, which can be used for troubleshooting later on or for post-mortem analysis. The key to effective logging is knowing when and how to use it. To help developers get comfortable with logging, this blog will cover some basic concepts and terminology related to logging in Java EE7 applications.</p>\n<h3>Logging is useful, but use it\u00a0wisely.</h3>\n<p>Logging is a very useful tool for debugging, diagnosing problems and monitoring the status of your application. However, logging can be abused if used incorrectly.</p>\n<ul>\n<li>Use it wisely: Don\u2019t overuse logging because it will make your application slower and less efficient at runtime. It\u2019s important to determine when to log something in the first place\u200a\u2014\u200ayou don\u2019t want to make use of all available resources just because you have a log file open on your\u00a0screen!</li>\n<li>Don\u2019t let logs pile up: If there are too many messages being written into logs every day (or even every hour), this could cause serious performance issues on large systems where performance matters\u00a0most.</li>\n</ul>\n<h3>Logging Level</h3>\n<p>The logging level of an application can be set in several\u00a0ways:</p>\n<ul>\n<li>The appender, logger and configuration files.</li>\n<li>System properties.</li>\n</ul>\n<h3>Logging in\u00a0Java</h3>\n<p>Java has a lot of logging frameworks in the Java.util package. The most popular\u00a0are:</p>\n<ul>\n<li>java.util.logging\u200a\u2014\u200athis provides a unified API for logging and tracing across applications, systems, and devices (including JVM processes).</li>\n<li>java.util.logging.ConsoleHandler\u200a\u2014\u200athis uses the JDK\u2019s native Console class to write messages to standard output devices such as screen or log files on disk; it does not require any additional configuration on its behalf at runtime; it supports both single-line and multi-line text formatting options; etc., etc.,\u00a0etc\u2026</li>\n</ul>\n<h3>Logging in Spring\u00a0Boot</h3>\n<p>Spring Boot applications can be configured to log events. This is done by adding the @EnableLogging annotation to your application class, and providing a logger implementation that will be used by all requests within your\u00a0app.</p>\n<p>The following code snippet shows how you might do\u00a0this:</p>\n<p>@SpringBootApplication @EnableLogging public class MyApp { /** * The logger used by this application.*/ private final Logger log = new Logger(this); }</p>\n<h3>Conclusion</h3>\n<p>In this article, we\u2019ve covered some of the most common logging options in Java and Spring Boot. We\u2019ve also shown you how to create a custom logger that can be used with your favorite logback implementation. This is just the beginning!</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=e43b40cf4e3c\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]},{"title":"Copy AI\u200a\u2014\u200acreating blog post on design patterns","pubDate":"2022-07-26 15:39:44","link":"https://medium.com/@jlokhande46/copy-ai-creating-blog-post-on-design-patterns-83e29276b41?source=rss-4217c0302166------2","guid":"https://medium.com/p/83e29276b41","author":"jayesh lokhande","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=83e29276b41","description":"\n<h3>Copy AI\u200a\u2014\u200acreating blog post on design\u00a0patterns</h3>\n<h3>Design Patterns</h3>\n<h3>Introduction</h3>\n<p>Design patterns are techniques that help to solve recurring problems in software design. There are many different design patterns, but they all have certain features in common. This article introduces you to the most popular design patterns and explains what they do. These articles will help you understand how to apply these techniques in your own\u00a0projects</p>\n<h3>Singleton</h3>\n<p>The singleton pattern is a creational pattern, meaning it\u2019s used to create an instance of a class. Singleton patterns are often used to implement the only one instance of an object or service in a system. This can be done by creating a global point of access for your codebase and ensuring that there is only one copy of it running at any given\u00a0time.</p>\n<p>The singleton pattern also helps prevent accidental creation of multiple instances by having each client request for the same object access via its own unique identifier (typically termed\u00a0\u201ckey\u201d).</p>\n<h3>Factory</h3>\n<p>A factory class is a design pattern that creates objects without exposing its inner workings. It has been used to create an object without exposing the inner workings of the object creation process, and it will be used in this way in this article as\u00a0well.</p>\n<p>The factory pattern helps you create an object without exposing its inner workings: when you instantiate a new instance of an object, you don\u2019t know how it was created or by whom; therefore, if one day there is another need for instances with different attributes than those currently being handled by your codebase (for example if some external API changes), then these changes won\u2019t affect any existing instances except those whose attributes were set manually during initialization time (which can be done easily by changing some values inside the constructor).</p>\n<h3>Builder</h3>\n<p>The Builder pattern is a creational design pattern. It\u2019s used to create complex objects and add a level of abstraction between the object being built and the builder class. The builder class can then be reused to build other objects that share similar constructors, eliminating the need for recursion or multiple calls on factory\u00a0methods.</p>\n<p>The Builder class itself doesn\u2019t do anything; it just provides an API for creating other classes with similar constructors (or factories).</p>\n<h3>Adapter</h3>\n<p>The Adapter pattern allows classes with incompatible interfaces to work together. This is a useful pattern when you have multiple classes that need to interact with each other, but the interfaces they use are incompatible. The Adapter class wraps the original class so that it can still be used by other objects in your system, while still providing an interface that works with all of\u00a0them.</p>\n<p>For example: consider an application that needs to store a car\u2019s location information and its current speed, but only supports GPS devices (not Wi-Fi). To support these requirements without requiring extra code on behalf of developers who write code for different platforms or devices, we could use this\u00a0pattern:</p>\n<ul><li>Create an abstract base class representing all cars such as \u201cCar\u201d or \u201cBicycle.\u201d Each subclass inherits from this base class and adds functionality specific to its own type; for\u00a0example:</li></ul>\n<h3>Composite</h3>\n<p>A composite pattern is a structural pattern that combines objects into tree structures to represent part-whole hierarchies. A composite is a generalization of the combination of two or more objects (or their parts) into a new object that contains all their properties and behaviors. The result is often called the hierarchy, which may be represented by combining the parts in any way you\u00a0like.</p>\n<p>The Composite Pattern defines how one thing can be made out of another thing; it also describes how two things are combined together to form something else entirely.</p>\n<h3>Proxy</h3>\n<p>A proxy is an object that acts as a placeholder for another object. The proxy can be used to control the access to an object and/or create copies of\u00a0it.</p>\n<p>You might use proxies when you want to restrict access to certain parts of your program, or when you want to provide more than one implementation of a function (see polymorphism).</p>\n<h3>Flyweight</h3>\n<p>Flyweight is a design pattern that is used to reduce the number of objects in a system, especially in a large system. It\u2019s basically just an object that has many methods and can be used to do multiple things. It reduces memory footprint and improves performance.</p>\n<p>Flyweight is based on the idea that you shouldn\u2019t create multiple versions of each object for reuse across different places in your application. Instead, you should create one flyweight class which has all these methods and then use it wherever necessary instead of creating new instances every time you want them (e.g., if there are five places where we need this\u00a0thing).</p>\n<h3>Decorator</h3>\n<p>The Decorator pattern is used to add or modify the behavior of an individual object. It is also used to extend the functionality of an object, changing its behavior in some\u00a0way.</p>\n<p>The Decorator pattern is a specialized case of delegation, where an object delegates its responsibilities (its methods) to another object that has been decorated with additional code or data. This new class then takes over responsibility for performing those tasks as well as providing additional features not available from its base\u00a0class.</p>\n<h3>Observer Pattern</h3>\n<p>The Observer pattern is an object-oriented design pattern that defines a one-to-one relationship between an object and its observers.</p>\n<p>It\u2019s used to separate responsibility for events from their source and to make sure that changes made directly affect the objects they\u00a0affect.</p>\n<p>The benefit of using this pattern is that it ensures that every time you modify your code, your changes will be reflected in all objects that depend on\u00a0it.</p>\n<p>There are several disadvantages to using this pattern:1) It can become hard to understand what exactly is going on if multiple classes use the same observer(s).2) When implementing an interface with more than one method signature (such as AbstractButton), there may be problems because each method signature must implement specific methods from the interface itself instead of providing its own implementation based on those required by each method signature</p>\n<p>Design patterns are a way to reuse code, by using it consistently in different situations. They can be used to help you write better code, which makes your programs easier to read and maintain.</p>\n<p>They\u2019re often described as a collection of reusable solutions for common programming problems. These solutions were developed by experienced programmers over time and are now standard practice in many programming languages (including Java).</p>\n<p>Design patterns are often used when writing large-scale applications or systems with complex behavior because they provide a simple way of achieving certain objectives without having to reinvent the wheel every time something needs\u00a0doing!</p>\n<h3>Conclusion</h3>\n<p>The most important takeaway is that design patterns are not just a matter of taste. They are an essential part of good OOP programming, and without them we would have to write our code in an entirely different way. Design patterns help us create reusable code that has fewer bugs, is easier to maintain, and can be reused across multiple projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=83e29276b41\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<h3>Copy AI\u200a\u2014\u200acreating blog post on design\u00a0patterns</h3>\n<h3>Design Patterns</h3>\n<h3>Introduction</h3>\n<p>Design patterns are techniques that help to solve recurring problems in software design. There are many different design patterns, but they all have certain features in common. This article introduces you to the most popular design patterns and explains what they do. These articles will help you understand how to apply these techniques in your own\u00a0projects</p>\n<h3>Singleton</h3>\n<p>The singleton pattern is a creational pattern, meaning it\u2019s used to create an instance of a class. Singleton patterns are often used to implement the only one instance of an object or service in a system. This can be done by creating a global point of access for your codebase and ensuring that there is only one copy of it running at any given\u00a0time.</p>\n<p>The singleton pattern also helps prevent accidental creation of multiple instances by having each client request for the same object access via its own unique identifier (typically termed\u00a0\u201ckey\u201d).</p>\n<h3>Factory</h3>\n<p>A factory class is a design pattern that creates objects without exposing its inner workings. It has been used to create an object without exposing the inner workings of the object creation process, and it will be used in this way in this article as\u00a0well.</p>\n<p>The factory pattern helps you create an object without exposing its inner workings: when you instantiate a new instance of an object, you don\u2019t know how it was created or by whom; therefore, if one day there is another need for instances with different attributes than those currently being handled by your codebase (for example if some external API changes), then these changes won\u2019t affect any existing instances except those whose attributes were set manually during initialization time (which can be done easily by changing some values inside the constructor).</p>\n<h3>Builder</h3>\n<p>The Builder pattern is a creational design pattern. It\u2019s used to create complex objects and add a level of abstraction between the object being built and the builder class. The builder class can then be reused to build other objects that share similar constructors, eliminating the need for recursion or multiple calls on factory\u00a0methods.</p>\n<p>The Builder class itself doesn\u2019t do anything; it just provides an API for creating other classes with similar constructors (or factories).</p>\n<h3>Adapter</h3>\n<p>The Adapter pattern allows classes with incompatible interfaces to work together. This is a useful pattern when you have multiple classes that need to interact with each other, but the interfaces they use are incompatible. The Adapter class wraps the original class so that it can still be used by other objects in your system, while still providing an interface that works with all of\u00a0them.</p>\n<p>For example: consider an application that needs to store a car\u2019s location information and its current speed, but only supports GPS devices (not Wi-Fi). To support these requirements without requiring extra code on behalf of developers who write code for different platforms or devices, we could use this\u00a0pattern:</p>\n<ul><li>Create an abstract base class representing all cars such as \u201cCar\u201d or \u201cBicycle.\u201d Each subclass inherits from this base class and adds functionality specific to its own type; for\u00a0example:</li></ul>\n<h3>Composite</h3>\n<p>A composite pattern is a structural pattern that combines objects into tree structures to represent part-whole hierarchies. A composite is a generalization of the combination of two or more objects (or their parts) into a new object that contains all their properties and behaviors. The result is often called the hierarchy, which may be represented by combining the parts in any way you\u00a0like.</p>\n<p>The Composite Pattern defines how one thing can be made out of another thing; it also describes how two things are combined together to form something else entirely.</p>\n<h3>Proxy</h3>\n<p>A proxy is an object that acts as a placeholder for another object. The proxy can be used to control the access to an object and/or create copies of\u00a0it.</p>\n<p>You might use proxies when you want to restrict access to certain parts of your program, or when you want to provide more than one implementation of a function (see polymorphism).</p>\n<h3>Flyweight</h3>\n<p>Flyweight is a design pattern that is used to reduce the number of objects in a system, especially in a large system. It\u2019s basically just an object that has many methods and can be used to do multiple things. It reduces memory footprint and improves performance.</p>\n<p>Flyweight is based on the idea that you shouldn\u2019t create multiple versions of each object for reuse across different places in your application. Instead, you should create one flyweight class which has all these methods and then use it wherever necessary instead of creating new instances every time you want them (e.g., if there are five places where we need this\u00a0thing).</p>\n<h3>Decorator</h3>\n<p>The Decorator pattern is used to add or modify the behavior of an individual object. It is also used to extend the functionality of an object, changing its behavior in some\u00a0way.</p>\n<p>The Decorator pattern is a specialized case of delegation, where an object delegates its responsibilities (its methods) to another object that has been decorated with additional code or data. This new class then takes over responsibility for performing those tasks as well as providing additional features not available from its base\u00a0class.</p>\n<h3>Observer Pattern</h3>\n<p>The Observer pattern is an object-oriented design pattern that defines a one-to-one relationship between an object and its observers.</p>\n<p>It\u2019s used to separate responsibility for events from their source and to make sure that changes made directly affect the objects they\u00a0affect.</p>\n<p>The benefit of using this pattern is that it ensures that every time you modify your code, your changes will be reflected in all objects that depend on\u00a0it.</p>\n<p>There are several disadvantages to using this pattern:1) It can become hard to understand what exactly is going on if multiple classes use the same observer(s).2) When implementing an interface with more than one method signature (such as AbstractButton), there may be problems because each method signature must implement specific methods from the interface itself instead of providing its own implementation based on those required by each method signature</p>\n<p>Design patterns are a way to reuse code, by using it consistently in different situations. They can be used to help you write better code, which makes your programs easier to read and maintain.</p>\n<p>They\u2019re often described as a collection of reusable solutions for common programming problems. These solutions were developed by experienced programmers over time and are now standard practice in many programming languages (including Java).</p>\n<p>Design patterns are often used when writing large-scale applications or systems with complex behavior because they provide a simple way of achieving certain objectives without having to reinvent the wheel every time something needs\u00a0doing!</p>\n<h3>Conclusion</h3>\n<p>The most important takeaway is that design patterns are not just a matter of taste. They are an essential part of good OOP programming, and without them we would have to write our code in an entirely different way. Design patterns help us create reusable code that has fewer bugs, is easier to maintain, and can be reused across multiple projects.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=83e29276b41\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]},{"title":"Some Random GOT Excerpt","pubDate":"2022-05-19 18:20:15","link":"https://medium.com/@jlokhande46/some-random-got-excerpt-3ed25e8c0e2e?source=rss-4217c0302166------2","guid":"https://medium.com/p/3ed25e8c0e2e","author":"jayesh lokhande","thumbnail":"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=3ed25e8c0e2e","description":"\n<p>The morning had dawned clear and cold, with a crispness that hinted at the end of summer. They set forth at daybreak to see a man beheaded, twenty in all, and Bran rode among them, nervous with excitement. This was the first time he had been deemed old enough to go with his lord father and his brothers to see the king\u2019s justice done. It was the ninth year of summer, and the seventh of Bran\u2019s\u00a0life.</p>\n<p>The man had been taken outside a small holdfast in the hills. Robb thought he was a wildling, his sword sworn to Mance Rayder, the King-beyond-the-Wall. It made Bran\u2019s skin prickle to think of it. He remembered the hearth tales Old Nan told them. The wildlings were cruel men, she said, slavers and slayers and thieves. They consorted with giants and ghouls, stole girl children in the dead of night, and drank blood from polished horns. And their women lay with the Others in the Long Night to sire terrible half-human children.</p>\n<p>But the man they found bound hand and foot to the holdfast wall awaiting the king\u2019s justice was old and scrawny, not much taller than Robb. He had lost both ears and a finger to frostbite, and he dressed all in black, the same as a brother of the Night\u2019s Watch, except that his furs were ragged and\u00a0greasy.</p>\n<p>The breath of man and horse mingled, steaming, in the cold morning air as his lord father had the man cut down from the wall and dragged before them. Robb and Jon sat tall and still on their horses, with Bran between them on his pony, trying to seem older than seven, trying to pretend that he\u2019d seen all this before. A faint wind blew through the holdfast gate. Over their heads flapped the banner of the Starks of Winterfell: a grey direwolf racing across an ice-white field.</p>\n<p>Bran\u2019s father sat solemnly on his horse, long brown hair stirring in the wind. His closely trimmed beard was shot with white, making him look older than his thirty-five years. He had a grim cast to his grey eyes this day, and he seemed not at all the man who would sit before the fire in the evening and talk softly of the age of heroes and the children of the forest. He had taken off Father\u2019s face, Bran thought, and donned the face of Lord Stark of Winterfell.</p>\n<p>There were questions asked and answers given there in the chill of morning, but afterward Bran could not recall much of what had been said. Finally his lord father gave a command, and two of his guardsmen dragged the ragged man to the ironwood stump in the center of the square. They forced his head down onto the hard black wood. Lord Eddard Stark dismounted and his ward Theon Greyjoy brought forth the sword. \u201cIce,\u201d that sword was called. It was as wide across as a man\u2019s hand, and taller even than Robb. The blade was Valyrian steel, spell-forged and dark as smoke. Nothing held an edge like Valyrian\u00a0steel.</p>\n<p>His father peeled off his gloves and handed them to Jory Cassel, the captain of his household guard. He took hold of Ice with both hands and said, \u201cIn the name of Robert of the House Baratheon, the First of his Name, King of the Andals and the Rhoynar and the First Men, Lord of the Seven Kingdoms and Protector of the Realm, by the word of Eddard of the House Stark, Lord of Winterfell and Warden of the North, I do sentence you to die.\u201d He lifted the great sword high above his\u00a0head.</p>\n<p>Bran\u2019s bastard brother Jon Snow moved closer. \u201cKeep the pony well in hand,\u201d he whispered. \u201cAnd don\u2019t look away. Father will know if you\u00a0do.\u201d</p>\n<p>Bran kept his pony well in hand, and did not look away.<br>His father took off the man\u2019s head with a single sure stroke. Blood sprayed out across the snow, as red as summerwine. One of the horses reared and had to be restrained to keep from bolting. Bran could not take his eyes off the blood. The snows around the stump drank it eagerly, reddening as he\u00a0watched.</p>\n<p>The head bounced off a thick root and rolled. It came up near Greyjoy\u2019s feet. Theon was a lean, dark youth of nineteen who found everything amusing. He laughed, put his boot on the head,and kicked it\u00a0away.</p>\n<p>\u201cAss,\u201d Jon muttered, low enough so Greyjoy did not hear. He put a hand on Bran\u2019s shoulder, and Bran looked over at his bastard\u00a0brother.</p>\n<p>\u201cYou did well,\u201d Jon told him solemnly. Jon was fourteen, an old hand at\u00a0justice.</p>\n<p>It seemed colder on the long ride back to Winterfell, though the wind had died by then and the sun was higher in the sky. Bran rode with his brothers, well ahead of the main party, his pony struggling hard to keep up with their\u00a0horses.</p>\n<p>\u201cThe deserter died bravely,\u201d Robb said. He was big and broad and growing every day, with his mother\u2019s coloring, the fair skin, red-brown hair, and blue eyes of the Tullys of Riverrun. \u201cHe had courage, at the\u00a0least.\u201d</p>\n<p>\u201cNo,\u201d Jon Snow said quietly. \u201cIt was not courage. This one was dead of fear. You could see it in his eyes, Stark.\u201d Jon\u2019s eyes were a grey so dark they seemed almost black, but there was little they did not see. He was of an age with Robb, but they did not look alike. Jon was slender where Robb was muscular, dark where Robb was fair, graceful and quick where his half brother was strong and\u00a0fast.</p>\n<p>Robb was not impressed. \u201cThe Others take his eyes,\u201d he swore. \u201cHe died well. Race you to the\u00a0bridge?\u201d</p>\n<p>\u201cDone,\u201d Jon said, kicking his horse forward. Robb cursed and followed, and they galloped off down the trail, Robb laughing and hooting, Jon silent and intent. The hooves of their horses kicked up showers of snow as they\u00a0went.</p>\n<p>Bran did not try to follow. His pony could not keep up. He had seen the ragged man\u2019s eyes, and he was thinking of them now. After a while, the sound of Robb\u2019s laughter receded, and the woods grew silent\u00a0again.</p>\n<p>That was when Jon reappeared on the crest of the hill before them. He waved and shouted down at them. <em>\u201cFather, Bran, come quickly, see what Robb has found!\u201d</em> Then he was gone\u00a0again.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3ed25e8c0e2e\" width=\"1\" height=\"1\" alt=\"\">\n","content":"\n<p>The morning had dawned clear and cold, with a crispness that hinted at the end of summer. They set forth at daybreak to see a man beheaded, twenty in all, and Bran rode among them, nervous with excitement. This was the first time he had been deemed old enough to go with his lord father and his brothers to see the king\u2019s justice done. It was the ninth year of summer, and the seventh of Bran\u2019s\u00a0life.</p>\n<p>The man had been taken outside a small holdfast in the hills. Robb thought he was a wildling, his sword sworn to Mance Rayder, the King-beyond-the-Wall. It made Bran\u2019s skin prickle to think of it. He remembered the hearth tales Old Nan told them. The wildlings were cruel men, she said, slavers and slayers and thieves. They consorted with giants and ghouls, stole girl children in the dead of night, and drank blood from polished horns. And their women lay with the Others in the Long Night to sire terrible half-human children.</p>\n<p>But the man they found bound hand and foot to the holdfast wall awaiting the king\u2019s justice was old and scrawny, not much taller than Robb. He had lost both ears and a finger to frostbite, and he dressed all in black, the same as a brother of the Night\u2019s Watch, except that his furs were ragged and\u00a0greasy.</p>\n<p>The breath of man and horse mingled, steaming, in the cold morning air as his lord father had the man cut down from the wall and dragged before them. Robb and Jon sat tall and still on their horses, with Bran between them on his pony, trying to seem older than seven, trying to pretend that he\u2019d seen all this before. A faint wind blew through the holdfast gate. Over their heads flapped the banner of the Starks of Winterfell: a grey direwolf racing across an ice-white field.</p>\n<p>Bran\u2019s father sat solemnly on his horse, long brown hair stirring in the wind. His closely trimmed beard was shot with white, making him look older than his thirty-five years. He had a grim cast to his grey eyes this day, and he seemed not at all the man who would sit before the fire in the evening and talk softly of the age of heroes and the children of the forest. He had taken off Father\u2019s face, Bran thought, and donned the face of Lord Stark of Winterfell.</p>\n<p>There were questions asked and answers given there in the chill of morning, but afterward Bran could not recall much of what had been said. Finally his lord father gave a command, and two of his guardsmen dragged the ragged man to the ironwood stump in the center of the square. They forced his head down onto the hard black wood. Lord Eddard Stark dismounted and his ward Theon Greyjoy brought forth the sword. \u201cIce,\u201d that sword was called. It was as wide across as a man\u2019s hand, and taller even than Robb. The blade was Valyrian steel, spell-forged and dark as smoke. Nothing held an edge like Valyrian\u00a0steel.</p>\n<p>His father peeled off his gloves and handed them to Jory Cassel, the captain of his household guard. He took hold of Ice with both hands and said, \u201cIn the name of Robert of the House Baratheon, the First of his Name, King of the Andals and the Rhoynar and the First Men, Lord of the Seven Kingdoms and Protector of the Realm, by the word of Eddard of the House Stark, Lord of Winterfell and Warden of the North, I do sentence you to die.\u201d He lifted the great sword high above his\u00a0head.</p>\n<p>Bran\u2019s bastard brother Jon Snow moved closer. \u201cKeep the pony well in hand,\u201d he whispered. \u201cAnd don\u2019t look away. Father will know if you\u00a0do.\u201d</p>\n<p>Bran kept his pony well in hand, and did not look away.<br>His father took off the man\u2019s head with a single sure stroke. Blood sprayed out across the snow, as red as summerwine. One of the horses reared and had to be restrained to keep from bolting. Bran could not take his eyes off the blood. The snows around the stump drank it eagerly, reddening as he\u00a0watched.</p>\n<p>The head bounced off a thick root and rolled. It came up near Greyjoy\u2019s feet. Theon was a lean, dark youth of nineteen who found everything amusing. He laughed, put his boot on the head,and kicked it\u00a0away.</p>\n<p>\u201cAss,\u201d Jon muttered, low enough so Greyjoy did not hear. He put a hand on Bran\u2019s shoulder, and Bran looked over at his bastard\u00a0brother.</p>\n<p>\u201cYou did well,\u201d Jon told him solemnly. Jon was fourteen, an old hand at\u00a0justice.</p>\n<p>It seemed colder on the long ride back to Winterfell, though the wind had died by then and the sun was higher in the sky. Bran rode with his brothers, well ahead of the main party, his pony struggling hard to keep up with their\u00a0horses.</p>\n<p>\u201cThe deserter died bravely,\u201d Robb said. He was big and broad and growing every day, with his mother\u2019s coloring, the fair skin, red-brown hair, and blue eyes of the Tullys of Riverrun. \u201cHe had courage, at the\u00a0least.\u201d</p>\n<p>\u201cNo,\u201d Jon Snow said quietly. \u201cIt was not courage. This one was dead of fear. You could see it in his eyes, Stark.\u201d Jon\u2019s eyes were a grey so dark they seemed almost black, but there was little they did not see. He was of an age with Robb, but they did not look alike. Jon was slender where Robb was muscular, dark where Robb was fair, graceful and quick where his half brother was strong and\u00a0fast.</p>\n<p>Robb was not impressed. \u201cThe Others take his eyes,\u201d he swore. \u201cHe died well. Race you to the\u00a0bridge?\u201d</p>\n<p>\u201cDone,\u201d Jon said, kicking his horse forward. Robb cursed and followed, and they galloped off down the trail, Robb laughing and hooting, Jon silent and intent. The hooves of their horses kicked up showers of snow as they\u00a0went.</p>\n<p>Bran did not try to follow. His pony could not keep up. He had seen the ragged man\u2019s eyes, and he was thinking of them now. After a while, the sound of Robb\u2019s laughter receded, and the woods grew silent\u00a0again.</p>\n<p>That was when Jon reappeared on the crest of the hill before them. He waved and shouted down at them. <em>\u201cFather, Bran, come quickly, see what Robb has found!\u201d</em> Then he was gone\u00a0again.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=3ed25e8c0e2e\" width=\"1\" height=\"1\" alt=\"\">\n","enclosure":{},"categories":[]}]}